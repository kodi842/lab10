#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <queue>
#include <limits.h>

using namespace std;

// Функция для создания матрицы смежности для взвешенного графа
int** createGraph(int size, bool directed) {
    int** G = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        G[i] = (int*)malloc(size * sizeof(int));
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (i == j) {
                G[i][j] = 0; // Петли отсутствуют
            }
            else if (directed || j > i) {
                G[i][j] = rand() % 10 + 1; // Генерация веса от 1 до 10
                if (!directed) {
                    G[j][i] = G[i][j]; // Симметричное заполнение для неориентированного графа
                }
            }
            else {
                G[i][j] = G[j][i]; // Симметрия для неориентированного графа
            }
        }
    }
    return G;
}

// Функция для вывода матрицы смежности
void printGraph(int** matrix, int n) {
    printf("Матрица смежности:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] == INT_MAX) {
                printf("INF ");
            }
            else {
                printf("%3d ", matrix[i][j]);
            }
        }
        printf("\n");
    }
}

// BFS для взвешенного графа
void weightedBFS(int** G, int v, int size) {
    queue<int> Q;
    int* DIST = (int*)malloc(size * sizeof(int));
    for (int i = 0; i < size; i++) {
        DIST[i] = INT_MAX;
    }

    Q.push(v);
    DIST[v] = 0;

    while (!Q.empty()) {
        int curr = Q.front();
        Q.pop();

        for (int i = 0; i < size; i++) {
            if (G[curr][i] > 0 && G[curr][i] != INT_MAX) {
                int new_dist = DIST[curr] + G[curr][i];
                if (new_dist < DIST[i]) {
                    DIST[i] = new_dist;
                    Q.push(i);
                }
            }
        }
    }

    printf("Расстояния от вершины %d:\n", v);
    for (int i = 0; i < size; i++) {
        if (DIST[i] == INT_MAX) {
            printf("Вершина %d: недостижима\n", i);
        }
        else {
            printf("Вершина %d: %d\n", i, DIST[i]);
        }
    }

    free(DIST);
}

// Алгоритм Флойда–Уоршелла
void floydWarshall(int** graph, int size, int** dist) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (i == j) {
                dist[i][j] = 0;
            }
            else if (graph[i][j] == 0) {
                dist[i][j] = INT_MAX;
            }
            else {
                dist[i][j] = graph[i][j];
            }
        }
    }

    for (int k = 0; k < size; k++) {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }
}

void analyzeGraph(int** dist, int size) {
    int* eccentricity = (int*)malloc(size * sizeof(int));
    int radius = INT_MAX;
    int diameter = 0;

    for (int i = 0; i < size; i++) {
        eccentricity[i] = 0;
        for (int j = 0; j < size; j++) {
            if (dist[i][j] != INT_MAX) {
                eccentricity[i] = max(eccentricity[i], dist[i][j]);
            }
        }
        radius = min(radius, eccentricity[i]);
        diameter = max(diameter, eccentricity[i]);
    }

    printf("Радиус графа: %d\n", radius);
    printf("Диаметр графа: %d\n", diameter);

    printf("Центральные вершины: ");
    for (int i = 0; i < size; i++) {
        if (eccentricity[i] == radius) {
            printf("%d ", i);
        }
    }
    printf("\n");

    printf("Периферийные вершины: ");
    for (int i = 0; i < size; i++) {
        if (eccentricity[i] == diameter) {
            printf("%d ", i);
        }
    }
    printf("\n");

    free(eccentricity);
}

int main() {
    srand((unsigned)time(0));

    int n;
    printf("Введите размер матрицы: ");
    if (scanf("%d", &n) != 1 || n <= 0) {
        printf("Ошибка: размер матрицы должен быть положительным числом.\n");
        return 1;
    }

    printf("Сгенерировать граф:\n1 - Неориентированный\n2 - Ориентированный\nВыбор: ");
    int choice;
    if (scanf("%d", &choice) != 1 || (choice != 1 && choice != 2)) {
        printf("Ошибка: некорректный выбор.\n");
        return 1;
    }

    bool directed = (choice == 2);
    int** graph = createGraph(n, directed);
    printGraph(graph, n);

    printf("Введите начальную вершину для обхода (от 0 до %d): ", n - 1);
    int start_node;
    if (scanf("%d", &start_node) != 1 || start_node < 0 || start_node >= n) {
        printf("Ошибка: неверная начальная вершина.\n");
        for (int i = 0; i < n; i++) free(graph[i]);
        free(graph);
        return 1;
    }

    weightedBFS(graph, start_node, n);

    int** dist = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        dist[i] = (int*)malloc(n * sizeof(int));
    }

    floydWarshall(graph, n, dist);
    analyzeGraph(dist, n);

    for (int i = 0; i < n; i++) {
        free(graph[i]);
        free(dist[i]);
    }
    free(graph);
    free(dist);

    return 0;
}
